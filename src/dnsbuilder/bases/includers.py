from typing import Dict
from hashlib import sha256
from ..base import Includer
from ..io.path import DNSBPath
from ..datacls.volume import Pair
import re
from ..exceptions import DNSBPathNotFoundError

# -------------------------
#
#   BIND IMPLEMENTATIONS
#
# -------------------------

class BindIncluder(Includer):
    """
        Class describe the `include "config-file";` line for BIND
    """
    _tmpl = '\n# Auto Generated by DNS-Builder\ninclude "{config_line}";\n'
    _blk = '\n# Auto Generated by DNS-Builder\n{block} {{{lines}}};\n'
    _global_blk = '\n# Auto Generated by DNS-Builder{lines}\n'

    def _make_blk(self, pair: Pair):
        block = self.parse_blk(pair)
        main_conf = self.confs.get("global", None)
        if main_conf is None:
            raise DNSBPathNotFoundError("global conf not found")
        line = self._tmpl.format(config_line=pair.dst)
        content = self._blk.format(block=block, lines=line)
        self.fs.append_text(main_conf.src, content)
        self.confs[block] = pair.src

    def include(self, pair: Pair):
        block = self.parse_blk(pair)
        if block is None:
            block = "global"
        conf = self.confs.get(block, None)
        if conf is None:
            self._make_blk(pair)
            return
        content = self._tmpl.format(config_line=pair.dst)
        self.fs.append_text(conf.src, content)

    def contain(self):
        _all = set(self.confs.keys())
        def _append(match: re.Match):
            blk_name = match.group(1)
            lines = match.group(2)
            if blk_name in _all:
                _all.remove(blk_name)
                updated_lines = lines + "\n" + self._tmpl.format(config_line=self.confs[blk_name].dst)
                return f"{blk_name} {{{updated_lines}\n}};"
            return f"{blk_name} {{{lines}}};"
        pattern = re.compile(r"(\w+)\s*\{(.*)\};", re.DOTALL)
        origin = self.fs.read_text(self.confs["global"].src)
        origin = pattern.sub(_append, origin)
        if _all:
            for blk in _all:
                if blk == 'global':
                    continue
                origin += self._blk.format(block=blk, lines=self._tmpl.format(config_line=self.confs[blk].dst))
        self.fs.write_text(self.confs["global"].src, origin)

# -------------------------
#
#   UNBOUND IMPLEMENTATIONS
#
# -------------------------

class UnboundIncluder(Includer):
    """
        Class describe the `include: config-file` line for Unbound
    """
    _tmpl = '\n# Auto Generated by DNS-Builder\ninclude: "{config_line}"\n'

    def _make_blk_ctx(self, pair: Pair, block_name: str):
        """
        Create block content with proper block identifier for Unbound.
        """
        if block_name == "global":
            return f'\n# Auto-Include by DNS Builder\n{self._tmpl.format(config_line=pair.dst)}'
        else:
            # For block configs, add the block identifier
            return f'\n# Auto-Include {block_name} block by DNS Builder\n{block_name}:\n{self._tmpl.format(config_line=pair.dst)}'

    def include(self, pair: Pair):
        """
        Add include directive to the appropriate configuration file.
        """
        block = self.parse_blk(pair)
        if block is None:
            block = "global"
        
        # Get the target configuration file
        conf = self.confs.get(block, None)
        if conf is None:
            # If no specific block config exists, use global config
            conf = self.confs.get("global", None)
            if conf is None:
                raise DNSBPathNotFoundError("global conf not found")
        
        # Add include directive with proper block formatting
        content = self._make_blk_ctx(pair, block)   
        self.fs.append_text(conf.src, content)

    def contain(self):
        global_conf = self.confs.get("global", None)
        if global_conf is None:
            return
        
        # Add include directives for all block configs to the global config
        for block_name, pair in self.confs.items():
            if block_name != "global":
                content = self._make_blk_ctx(pair, block_name)
                self.fs.append_text(global_conf.src, content)

